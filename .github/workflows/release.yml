name: Build and Release
on:
    push:
        tags:
            - "v*" 

jobs:
    build:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest]

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18"

            - name: Install Dependencies
              run: npm install

            - name: Build Application
              run: |
                  if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
                    npm run build:linux
                  elif [ "${{ matrix.os }}" == "windows-latest" ]; then
                    npm run build:win
                  fi

            - name: Upload Build Artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ matrix.os }}-build
                  path: |
                      dist/*.exe
                      dist/*.deb

    release:
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3

            - name: Download Build Artifacts
              uses: actions/download-artifact@v3
              with:
                  name: ubuntu-latest-build
                  path: ./linux-build

            - name: Download Windows Artifacts
              uses: actions/download-artifact@v3
              with:
                  name: windows-latest-build
                  path: ./windows-build

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ github.ref_name }}
                  release_name: Release ${{ github.ref_name }}
                  body: |
                      Ù†Ø³Ø®Ù‡ Ø¬Ø¯ÛŒØ¯ Ù…Ù†ØªØ´Ø± Ø´Ø¯! ðŸŽ‰
                  draft: false
                  prerelease: false

            - name: Upload Linux Build (.deb)
              uses: actions/upload-release-asset@v2
              with:
                  repo: ${{ github.repository }}
                  release_id: ${{ steps.create_release.outputs.id }}
                  asset_path: ./linux-build/*.deb
                  asset_name: application.deb
                  asset_content_type: application/x-debian-package

            - name: Upload Windows Build (.exe)
              uses: actions/upload-release-asset@v2
              with:
                  repo: ${{ github.repository }}
                  release_id: ${{ steps.create_release.outputs.id }}
                  asset_path: ./windows-build/*.exe
                  asset_name: application.exe
                  asset_content_type: application/vnd.microsoft.portable-executable
